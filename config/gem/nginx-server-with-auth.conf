# This configuration enables the dual-server authentication gateway.
# It is activated when authentication is required.
# It should be included within the main http block of nginx.conf.

# -----------------------------------------------------------------
# Conditional Authentication Logic
# The `map` directive safely creates a variable based on the request.
# This avoids using 'if' inside location blocks, which is the root cause
# of the previous issues. It must be defined in the http context.
# -----------------------------------------------------------------
map "$request_method:$request_uri" $target_workflow {
    # By default, all requests are sent to the workflow requiring authentication.
    default @proxy_with_auth;

    # An exception: GET requests for /v1/ping are sent to the auth-free workflow.
    "GET:/v1/ping" @proxy_without_auth;
}


# -----------------------------------------------------------------
# SERVER 1: Public-Facing Authentication Gateway
# All external traffic enters here first. It dispatches requests
# to internal workflows based on the map's logic.
# -----------------------------------------------------------------
server {
    # Listen on the public port and act as the default server.
    listen ${PUBLIC_PORT};
    listen [::]:${PUBLIC_PORT};

    # This location handles requests that REQUIRE authentication.
    location @proxy_with_auth {
        # 'internal' ensures this location is only accessible via Nginx itself.
        internal;

        # The subrequest to the auth handler is triggered here.
        auth_request /_auth_handler;

        # If auth is successful, the original request is passed to the internal server.
        proxy_pass http://127.0.0.1:${AUTH_BACKEND_PORT};

        # Forward headers that are critical for the upstream services.
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # This location handles requests that DO NOT require authentication.
    location @proxy_without_auth {
        # 'internal' ensures this location is only accessible via Nginx itself.
        internal;

        # The request is passed directly to the internal server, skipping auth.
        proxy_pass http://127.0.0.1:${AUTH_BACKEND_PORT};

        # Forward headers that are critical for the upstream services.
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # This location handles the actual authentication subrequest call.
    location = /_auth_handler {
        # 'internal' prevents clients from accessing this endpoint directly.
        internal;

        # Forward the auth check to the Python authentication service.
        proxy_pass http://127.0.0.1:${GEM_SERVER_PORT}/auth;

        # The request body is not needed for the auth check.
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # Pass necessary information to the auth service.
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # This is the main entry point that catches all incoming requests.
    location / {
        # This `try_files` directive acts as an internal "goto".
        # It immediately passes control to the named location stored in the
        # $target_workflow variable, which was determined by the map.
        try_files "" $target_workflow;
    }
}


# -----------------------------------------------------------------
# SERVER 2: Internal Routing Server
# This server is NOT exposed to the outside world. It only listens
# on the local loopback interface and trusts all incoming requests.
# -----------------------------------------------------------------
server {
    # IMPORTANT: Listen only on 127.0.0.1 (localhost).
    # This prevents any direct external access.
    listen 127.0.0.1:${AUTH_BACKEND_PORT};

    # This server's only job is to perform routing based on the
    # developer-provided configuration files. No authentication is needed here.
    include /opt/gem/nginx/*.conf;
}
